name: 'Install ESMF'
description: 'Install/Cache ESMF on Runner'
inputs:
  version:
    description: 'ESMF Version'
    required: false
    default: 'latest'
  esmpy:
    description: 'Enable esmpy'
    required: false
    default: false
  cache:
    description: 'Enable Caching'
    required: false
    default: true

runs:
  using: "composite"
  steps:
    - id: version-esmf
      shell: bash
      run: |
        if [[ "${{inputs.version}}" == 'latest' ]]; then
          ESMF_API_URL=https://api.github.com/repos/esmf-org/esmf/releases/latest
          curl --silent -L "${ESMF_API_URL}" > ${{runner.temp}}/.esmf-gh.info
          ESMF_VERSION=`cat ${{runner.temp}}/.esmf-gh.info | grep -m1 '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/'`
          rm -f ${{runner.temp}}/.esmf-gh.info
          ESMF_URL=https://github.com/esmf-org/esmf/archive/refs/tags/${ESMF_VERSION}.tar.gz
          ESMF_VERSION="latest"
        elif [[ "${{inputs.version}}" == 'develop' ]]; then
          ESMF_API_URL=https://api.github.com/repos/esmf-org/esmf/commits/develop
          curl --silent -L "${ESMF_API_URL}" > ${{runner.temp}}/.esmf-gh.info
          ESMF_VERSION=`cat ${{runner.temp}}/.esmf-gh.info | grep -m1 '"sha":' | sed -E 's/.*"([^"]+)".*/\1/'`
          rm -f ${{runner.temp}}/.esmf-gh.info
          ESMF_VERSION=`echo $ESMF_VERSION | sed -E 's/.*"([^"]+)".*/\1/'`
          ESMF_URL=https://github.com/esmf-org/esmf/archive/${ESMF_VERSION}.tar.gz
          ESMF_VERSION="develop"
        else
          ESMF_URL=https://github.com/esmf-org/esmf/archive/refs/tags/${{inputs.version}}.tar.gz
          ESMF_VERSION=`echo "${{inputs.version}}" | sed 's/^v//g'`
        fi
        echo "esmf-url=${ESMF_URL}" >> ${GITHUB_OUTPUT}
        echo "ESMF_VERSION=${ESMF_VERSION}" >> ${GITHUB_ENV}
        if [ -z "${{env.ESMF_INSTALL_PREFIX}}" ]; then
          echo "ESMF_ROOT=${HOME}/esmf-${ESMF_VERSION}" >> ${GITHUB_ENV}
        else
          echo "ESMF_ROOT=${{env.ESMF_INSTALL_PREFIX}}" >> ${GITHUB_ENV}
        fi
    - id: download-esmf
      shell: bash
      env:
        ESMF_DIR: ${{runner.temp}}/esmf
      run: |
        mkdir -p ${ESMF_DIR}
        cd ${ESMF_DIR}
        curl --silent -L ${{steps.version-esmf.outputs.esmf-url}} | tar --strip-components=1 -xz
        make info | sed -E '/Compiling on|Machine characteristics/d' > ${{github.workspace}}/.esmf.info
    - id: cache-esmf
      if: inputs.cache == 'true'
      uses: actions/cache@v3
      with:
        path: ${{env.ESMF_ROOT}}
        key: esmf@${{env.ESMF_VERSION}}-${{hashFiles('.esmf.info')}}
    - id: environment-esmf
      shell: bash
      run: |
        echo "ESMFMKFILE=${{env.ESMF_ROOT}}/lib/esmf.mk" >> $GITHUB_ENV
        LD_LIBRARY_PATH=${{env.ESMF_ROOT}}/lib:${LD_LIBRARY_PATH}
        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "${{env.ESMF_ROOT}}/bin" >> $GITHUB_PATH
    - id: check-install-esmf
      shell: bash
      env:
        ESMF_CACHE_KEY: "${{hashFiles('.esmf.info')}}"
      run: |
        if [ -f "$ESMFMKFILE" ]; then
          INSTALLED_CACHE_KEY=`cat $ESMFMKFILE | grep -m1 'ESMF_CACHE_KEY\='` || true
          INSTALLED_CACHE_KEY=${INSTALLED_CACHE_KEY#*=}
          if [ "$INSTALLED_CACHE_KEY" == "$ESMF_CACHE_KEY" ]; then
            echo "key-match=true" >> ${GITHUB_OUTPUT}
          else
            echo "key-match=false" >> ${GITHUB_OUTPUT}
          fi
        else
          echo "key-match=false" >> ${GITHUB_OUTPUT}
        fi
    - id: install-esmf
      if: steps.check-install-esmf.outputs.key-match != 'true'
      shell: bash
      env:
        ESMF_DIR: ${{runner.temp}}/esmf
        ESMF_INSTALL_MODDIR: "mod"
        ESMF_INSTALL_BINDIR: "bin"
        ESMF_INSTALL_LIBDIR: "lib"
        ESMF_INSTALL_DOCDIR: "doc"
        ESMF_INSTALL_HEADERDIR: "include"
        ESMF_INSTALL_PREFIX: "${{env.ESMF_ROOT}}"
        ESMF_CACHE_KEY: "${{hashFiles('.esmf.info')}}"
      run: |
        rm -f ${{github.workspace}}/.esmf.info
        cd ${ESMF_DIR}
        make -j 2
        make install
        mkdir -p ${ESMF_INSTALL_PREFIX}/addon/esmpy
        if [ -d "src/addon/esmpy" ]; then
          rsync -a src/addon/esmpy/ ${ESMF_INSTALL_PREFIX}/addon/esmpy
        elif [ -d "src/addon/ESMPy" ]; then
          rsync -a src/addon/ESMPy/ ${ESMF_INSTALL_PREFIX}/addon/esmpy
        fi
    - id: install-esmpy
      if: inputs.esmpy == 'true'
      shell: bash
      run: |
        cd ${{env.ESMF_ROOT}}/addon/esmpy
        python -m pip install --upgrade pip
        python -m pip install .
branding:
  icon: download
  color: blue
